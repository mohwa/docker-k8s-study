version: "3"
services:
  client:
    build:
      # 도커 이미지를 구성하기위한 파일과 폴더들이 있는 경로
      context: ./client
      dockerfile: Dockerfile.dev
    volumes:
      # client 폴더안의 모든 파일 or 폴더들을 매핑한다.
      - ./client:/app
      # https://ui.toast.com/weekly-pick/ko_20160823
      # client/node_modules 폴더는 매핑하지않는다.
      - /app/node_modules
    expose:
      - "3000"
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      MYSQL_HOST: "mysql"
      MYSQL_PORT: 3306
      MYSQL_ROOT_USER: "root"
      MYSQL_ROOT_PASSWORD: "password"
      MYSQL_DATABASE: "my_app"
    expose:
      - "5000"
  mysql:
    build:
      # 도커 이미지를 구성하기위한 파일과 폴더들이 있는 위치
      context: ./mysql
      dockerfile: Dockerfile
    # 개발자가 임의로 멈추려고할때 빼고는 항상 재시작한다.
    restart: unless-stopped
    ports:
      - "3307:3306"
    volumes:
      # 배포 시, 이전 버전의 컨테이너를 지우더라도 DB 에 저장된 데이터가 지워지지않게해주는 volumes 설정이다.
      # 기본은 컨테이너 삭제 시, 해당 컨테이너에 저장된 데이터까지 지워지게됩니다.

      # docker 에는 /var/lib/* 라는 호스트 파일 시스템이 존재하고, DB 처럼 영구적으로 저장해야할 데이터들은 이곳에 저장할 수 있다.
      - ./mysql/mysql_data:/var/lib/mysql
      - ./mysql/sqls:/docker-entrypoint-initdb.d
    environment:
      # 환경 변수를 통해, mysql 의 root 패스워드를 설정한다.
      MYSQL_ROOT_PASSWORD: "password"
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    # container_name: dev_nginx
    restart: always
    ports:
      - "3000:80"