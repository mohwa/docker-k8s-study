name: ci / cd

on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [feature/docker-react-test-with-k8s]
#    branches: [ master ]

# ghcr 패키지(docker image) URL
# https://github.com/users/mohwa/packages/container/package/mohwa%2Fdocker-k8s-study

env:
  # ghcr: github container registry
  # https://github.com/features/packages
  REGISTRY: ghcr.io
  # ghcr 에 배포할 tag 이름은 ghcr.io/<OWNER>/<IMAGE-NAME> 형식을 따른다.
  # 저장된 이미지는 github 저장소가 아닌, 사용자나 조직 같은 계정 밑에서 관리된다.
  CLIENT_IMAGE_NAME: ghcr.io/${{ github.repository }}-client:${{ github.sha }}
  BACKEND_IMAGE_NAME: ghcr.io/${{ github.repository }}-backend:${{ github.sha }}
  MYSQL_IMAGE_NAME: ghcr.io/${{ github.repository }}-mysql:${{ github.sha }}
  NGINX_IMAGE_NAME: ghcr.io/${{ github.repository }}-nginx:${{ github.sha }}
  VERSION: ${{ github.sha }}
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          ref: feature/docker-react-test-with-k8s
        # docker buildx: 여러 플랫폼(또는 아키텍쳐)(linux/amd64, linux/arm64, linux/ppc64le, linux/s390x, linux/386 등)으로 빌드하는 기능 등을 포함한 cli 확장 플러그인이다.
        # https://meetup.toast.com/posts/255
        # https://github.com/docker/setup-buildx-action
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          # repository 에서 설정된 secrets 값을 정의한다.
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Client build and push
        uses: docker/build-push-action@v2
        id: client_build
        with:
          context: ./client
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          # ghcr 에 저장할 tag 이름은 ghcr.io/<OWNER>/<IMAGE-NAME> 형식을 따른다.
          # 저장된 이미지는 github 저장소가 아닌, 사용자나 조직 같은 계정 밑에서 관리된다.
          tags: |
            ${{ env.CLIENT_IMAGE_NAME }}
      - name: Backend build and push
        uses: docker/build-push-action@v2
        id: backend_service_build
        with:
          context: ./backend
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          # ghcr 에 저장할 tag 이름은 ghcr.io/<OWNER>/<IMAGE-NAME> 형식을 따른다.
          # 저장된 이미지는 github 저장소가 아닌, 사용자나 조직 같은 계정 밑에서 관리된다.
          # https://github.com/mohwa?tab=packages
          tags: |
            ${{ env.BACKEND_IMAGE_NAME }}
      - name: Mysql build and push
        uses: docker/build-push-action@v2
        id: mysql_service_build
        with:
          context: ./mysql
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: |
            ${{ env.MYSQL_IMAGE_NAME }}
      - name: Nginx build and push
        uses: docker/build-push-action@v2
        id: nginx_service_build
        with:
          context: ./nginx
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: |
            ${{ env.NGINX_IMAGE_NAME }}

  deploy:
    needs: [ build ]
    name: Deploy
    runs-on: [ self-hosted ]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          ref: feature/docker-react-test-with-k8s
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Run docker containers
        run: |
          # docker project name 이 "/" 문자를 허용하지않아, 해당 문자를 "-" 로 대치시켰다.
          PROJECT_NAME=$(echo ${{ github.repository }} | sed 's/\//-/g')-prod

          echo $PROJECT_NAME
          echo $PATH

          # k8s_ghcr: 쿠버네티스 secret 이름
          # password 에는 ghcr 패키지용 토큰을 설정한다.
          # https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account
          # https://loft.sh/blog/docker-compose-to-kubernetes-step-by-step-migration/
          kubectl delete secret k8s-ghcr >> /dev/null 2>&1

          # github token 때문에, kube secret 이 생성되지않는다.
          # 이 부분도 확인해야한다.
          kubectl create secret docker-registry k8s-ghcr \
          --docker-server=ghcr.io \
          --docker-username=mohwa \
          --docker-password=${{ secrets.GHCR_TOKEN }} \
          --docker-email=yanione2@gmail.com

          # default serviceaccount 에 생성된 imagePullSecrets 를 추가한다.
          kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "k8s-ghcr"}]}'

          # echo ${{ secrets.GHCR_TOKEN }} | docker login https://ghcr.io -u mohwa --password-stdin

          # install kompose
          curl -L https://github.com/kubernetes/kompose/releases/download/v1.24.0/kompose-linux-amd64 -o kompose
          chmod +x kompose
          sudo mv ./kompose /usr/local/bin/kompose

          cd k8s_config

          kompose -f ../docker-compose.yml convert --replicas 3
          # find -name "*.yaml" -exec sed -i "s/extensions\/v1beta1/apps\/v1/g" {} \;

          # 상황에 따라, deployment(pods), service 를 재배포하는것이 아닌, kubectl set 으로 pod 에 포함된 container(name으로) 이미지만 Rolling 업데이트할 수 있다.
          # 기존 pvc 를 삭제한다.
          kubectl delete pvc mysql-data >> /dev/null 2>&1

          kubectl apply -f .
          kubectl get svc

#  cleanup:
#    needs: [ build, deploy ]
#    name: Clean up
#    runs-on: [ self-hosted ]
#    steps:
#      - name: Clean up docker images
#        run: |
#          # docker-compose.yml 파일에서 사용될 환경 변수들을 설정한다.
#          export CLIENT_IMAGE_NAME=${{ env.CLIENT_IMAGE_NAME }}
#          export BACKEND_IMAGE_NAME=${{ env.BACKEND_IMAGE_NAME }}
#          export MYSQL_IMAGE_NAME=${{ env.MYSQL_IMAGE_NAME }}
#          export NGINX_IMAGE_NAME=${{ env.NGINX_IMAGE_NAME }}
#
#          # 이전 docker 이미지들을 삭제한다.
#          chmod +x scripts/cleanup.sh
#          sh scripts/cleanup.sh
