# This is a basic workflow to help you get started with Actions
name: ci / cd

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [feature/docker-react-test]
#    branches: [ master ]

# ghcr 패키지(docker image) URL
# https://github.com/users/mohwa/packages/container/package/mohwa%2Fdocker-k8s-study

env:
  # ghcr: github container registry(개별 docker registry 로도 사용할 수 있다)
  # https://github.com/features/packages
  REGISTRY: ghcr.io
  CLIENT_IMAGE_NAME: ghcr.io/${{ github.repository }}/client
  NGINX_IMAGE_NAME: ghcr.io/${{ github.repository }}/nginx
  CLIENT_CONTAINER_NAME: docker-k8s-study-client
  NGINX_CONTAINER_NAME: docker-k8s-study-nginx
  VERSION: ${{ github.sha }}
  CLIENT_CONTEXT: ./client
  NGINX_CONTEXT: ./nginx

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          ref: feature/docker-react-test
        # docker buildx: 여러 플랫폼(또는 아키텍쳐)(linux/amd64, linux/arm64, linux/ppc64le, linux/s390x, linux/386 등)으로 빌드하는 기능 등을 포함한 CLI 확장 플러그인이다.
        # https://meetup.toast.com/posts/255
        # https://github.com/docker/setup-buildx-action
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-
        # https://github.com/features/packages
        # 가격 정책
        # https://github.com/features/packages#pricing
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          # 생성한 repository secrets 값을 정의한다.
          password: ${{ secrets.GHP_REACT_TEST }}
      - name: Client service build and push
        uses: docker/build-push-action@v2
        id: client_service_build
        with:
          context: ${{ env.CLIENT_CONTEXT }}
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          # ghcr 에 저장할 tag 이름은 ghcr.io/<OWNER>/<IMAGE-NAME> 형식을 따른다.
          # 저장된 이미지는 github 저장소가 아닌, 사용자나 조직 같은 계정 밑에서 관리된다.
          tags: |
              ${{ env.CLIENT_IMAGE_NAME }}:latest
              ${{ env.CLIENT_IMAGE_NAME }}:${{ env.VERSION }}
      - name: Nginx service build and push
        uses: docker/build-push-action@v2
        id: nginx_service_build
        with:
          context: ${{ env.NGINX_CONTEXT }}
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          # ghcr 에 저장할 tag 이름은 ghcr.io/<OWNER>/<IMAGE-NAME> 형식을 따른다.
          # 저장된 이미지는 github 저장소가 아닌, 사용자나 조직 같은 계정 밑에서 관리된다.
          tags: |
            ${{ env.NGINX_IMAGE_NAME }}:latest
            ${{ env.NGINX_IMAGE_NAME }}:${{ env.VERSION }}

  deploy:
    needs: build
    name: Deploy
#    runs-on: [ self-hosted, label-production ]
    # self-hosted 가 없으면 ms azuer 에 배포되는걸까?
#    runs-on: [ self-hosted ]
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHP_REACT_TEST }}
      - name: Docker run
        # container 이름을 가진 docker process 가 있다면, 해당 process 를 stop 한 후, container 를 삭제한다.
        run: |
          docker ps -q --filter "name=${{ env.CLIENT_CONTAINER_NAME }}" | grep -q . && docker stop ${{ env.CLIENT_CONTAINER_NAME }} && docker rm -fv ${{ env.CLIENT_CONTAINER_NAME }}
          docker ps -q --filter "name=${{ env.NGINX_CONTAINER_NAME }}" | grep -q . && docker stop ${{ env.NGINX_CONTAINER_NAME }} && docker rm -fv ${{ env.NGINX_CONTAINER_NAME }}
          docker-compose up -d

  cleanup:
    needs: [ build, deploy ]
    name: Clean up docker images
#    runs-on: [ self-hosted, production ]
#    runs-on: [ self-hosted ]
    steps:
      -   name: Clean up docker images
          # 생성된 이전 docker image 를 삭제한다.
          run: |
            docker rmi $(docker images --filter "before=${{ env.CLIENT_IMAGE_NAME }}:${{ env.VERSION }}" --filter=reference="${{ env.CLIENT_IMAGE_NAME }}:*" -q)
            docker rmi $(docker images --filter "before=${{ env.NGINX_IMAGE_NAME }}:${{ env.VERSION }}" --filter=reference="${{ env.NGINX_IMAGE_NAME }}:*" -q)