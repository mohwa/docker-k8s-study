# yaml 포맷 버전(docker-compose 1.10 이상부터는 해당 버전을 3으로 설정한다)
version: "3"
services:
  client:
    image: ghcr.io/mohwa/docker-k8s-study-client:${IMAGE_VERSION}
    container_name: docker-k8s-study-client
  backend:
    image: ghcr.io/mohwa/docker-k8s-study-backend:${IMAGE_VERSION}
    container_name: docker-k8s-study-backend
    environment:
      MYSQL_HOST: "mysql"
      MYSQL_PORT: 3306
      MYSQL_ROOT_USER: "root"
      MYSQL_ROOT_PASSWORD: "password"
      MYSQL_DATABASE: "my_app"
  mysql:
    image: ghcr.io/mohwa/docker-k8s-study-mysql:${IMAGE_VERSION}
    container_name: docker-k8s-study-mysql
    restart: unless-stopped
    ports:
      - "3003:3306"
    volumes:
      # 배포 시, 이전 버전의 컨테이너를 지우더라도 DB 에 저장된 자료를 지워지지않게해주는 volumes 설정이다.
      # 원래는 컨테이너를 삭제하면, 해당 컨테이너에 저장된 DB 는 지워지게됩니다.

      # 이미지로 컨테이너를 생성하면, 해당 이미지는 "읽기 전용"으로 변경된다.
      # docker 에는 /var/lib/ 라는 호스트 파일 시스템이 존재하고, DB 같이 영구적으로 저장해야할 데이터는 이곳에 저장한다.
      - ./mysql/mysql_data:/var/lib/mysql
      - ./mysql/sqls:/docker-entrypoint-initdb.d
    # init.sql 파일을 명시적으로 실행한다.(init.sql 파일이 강좌와 다르게 자동으로 실행되지않아, 이 부분을 추가했다)
#    command: --init-file /docker-entrypoint-initdb.d/init.sql
    environment:
      # 환경 변수를 통해, mysql 의 root password 를 설정한다.
      MYSQL_ROOT_PASSWORD: "password"
  nginx:
    image: ghcr.io/mohwa/docker-k8s-study-nginx:${IMAGE_VERSION}
    container_name: docker-k8s-study-nginx
    restart: always
    ports:
      - "3002:80"